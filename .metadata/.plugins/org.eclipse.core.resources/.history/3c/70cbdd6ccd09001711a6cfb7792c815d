/* TU Delft
 * BSc Computer Science
 * TI2735-C Data Mining 2016-2017
 * Project Deliverable 02: Latent Factors
 */

import java.lang.System;
import java.util.Map;
import java.util.Random;

public class LatentFactors {
	
	public static void main(String[] args) {
		
		// Read user list
		UserList userList = new UserList();
		userList.readFile("data/users.csv");
		
		// Read movie list
		MovieList movieList = new MovieList();
		movieList.readFile("data/movies.csv");
		
		// Read rating list
		RatingList ratings = new RatingList();
		ratings.readFile("data/ratings.csv", userList, movieList);	

		// Make predictions file
		RatingList predRatings = new RatingList();
		predRatings.readFile("data/predictionst.csv", userList, movieList);

		// Add ratings to user and movie lists
		userList.addRatings(ratings);
		movieList.addRatings(ratings);

		// Perform rating predictions
		predictRatings(userList, movieList, ratings, predRatings);

		// Write result file
		predRatings.writeResultsFile("submission.csv");
	}
	
	public static RatingList predictRatings(UserList userList,
			MovieList movieList, RatingList ratingList, RatingList predRatings) {

		// Number of users and movies
		int nU = userList.size();
		int nM = movieList.size();
		
		// Normalize ratings for every user separately
		// Xilin Code
		for(int i=0;i<nU;i++){
			Map<Integer, Double> rating = userList.get(i).getRatings();
			Util.subtractRating(rating,Util.calculateAverage(rating));
		}
		
		// Number of factors
		int nF = 3;
		
		// Regularization parameters
		double lambdaQ = 1.0;
		double lambdaP = 1.0;
		
		// Optimization parameters
		double xTolerance = 0.0001;
		int maxIterations = 20;
		double RMSE_ = Double.POSITIVE_INFINITY;
		
		// Initialize random number generator
		Random rng = new Random();
		
		// Initialize factors
		Map<Integer,Map<Integer,Double>> Q = Util.initializeLatentFactor(nU,nF);
		Map<Integer,Map<Integer,Double>> P = Util.initializeLatentFactor(nM,nF);
				
		// Perform optimization
		// Xilin Code, Q first
		
		double error = 1.0;
		for(int iter=0;iter<maxIterations && error>xTolerance;iter++){
			for(int i=0;i<nU;i++){
				for(int j=0;j<nF;j++){
					Q.get(i).put(j,Util.updateQuf(userList, Q, P, i, j, nF, 0));
				}
			}
			for(int i=0;i<nM;i++){
				for(int j=0;j<nF;j++){
					P.get(i).put(j, Util.updatePmf(movieList, Q, P, i, j, nF, 0));
				}
			}
			error = Util.rootMeanSquaredError(userList, Q, P);
			System.out.print(error);
		}
		// Loop over to-be-predicted ratings
		System.out.print("Running predictions..");
		for (int i=0; i<predRatings.size(); i++) {
			int pred_user_no = predRatings.get(i).getUser().getIndex()-1;
			int pred_movie_no = predRatings.get(i).getMovie().getIndex()-1;
			double prediction = Util.innerProduct(Q.get(pred_user_no), P.get(pred_movie_no));
			System.out.print(prediction);
			// Set predicted rating
			predRatings.get(i).setRating(prediction);
		}
		System.out.print("done.");

		// Return predictions
		return predRatings;
	}
}
