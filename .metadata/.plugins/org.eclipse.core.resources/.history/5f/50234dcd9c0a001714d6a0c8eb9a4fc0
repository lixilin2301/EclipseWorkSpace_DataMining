import java.util.List;

public class main {
	
	private static void hierarchical() {
		// add code here 
		int k = 3;
		HierarchicalClusteringPlotter hcp = new HierarchicalClusteringPlotter(k ,"data/cluster.txt");
//		HierarchicalClusteringPlotter hcp = new HierarchicalClusteringPlotter(k ,"data/cluster_lines.txt");
		
	}
	
	private static void hierarchicalDigits() {
		// add code here
		int k = 10;
		HierarchicalClustering hc = new HierarchicalClustering(k, "data/train_digits.txt");
		while (hc.getClusterSize() > k) {
			hc.update();
		}
		for (int i = 0; i < hc.getClusterSize(); i++) {
			DigitFrame df = new DigitFrame("title", hc.getCluster(i).centroid(), 8, 8);
		}	
	}
	
	private static void kmeans() {
		// add code here
		KMeansPlotter kmp = new KMeansPlotter(3,"data/cluster.txt");
		
	}
	
	private static void kmeansTuneK() {
		// add code here
		for(int k=1;k<11;k++){
			double rss = 0.0;
			KMeans kmp = new KMeans(k,"data/cluster.txt");
			// Update
			for(int iter=0;iter<20;iter++){
				kmp.update();
			}
			// RSS
			for(Cluster c: kmp.getClusters()){
				rss += c.calculateAverageRSS();
			}
			System.out.println("k:"+k+"; RSS:"+(rss/k));
		}
	}
	
	private static void kmeansDigits() {
		// add code here
		KMeans kmp = new KMeans(10,"data/train_digits.txt");
		double rss_history = 0.0;
		double rss_new = 10.0;
		
		
		while(rss_new-rss_history>0.0001){
			rss_history=rss_new;
			kmp.update();
			rss_new = 0.0;
			for(Cluster c: kmp.getClusters()){
				rss_new += c.calculateAverageRSS();
			}
		}
		for(Cluster c: kmp.getClusters()){
			DigitFrame df = new DigitFrame("title", c.centroid(), 8, 8);
		}
	}

	public static void main(String[] args) {
//		hierarchical();
//		hierarchicalDigits();
//		kmeans();
//		kmeansTuneK();
		kmeansDigits();
	}

}
