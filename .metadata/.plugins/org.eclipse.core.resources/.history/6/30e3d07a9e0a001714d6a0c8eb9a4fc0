import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class KMeans {
	/**
	 * The number of clusters to detect.
	 */
	private int k;
	
	/**
	 * A collection of (k) clusters.
	 */
	private List<Cluster> clusters;
	
	/**
	 * The unclustered data.
	 */
	private Cluster data;
	private ArrayList<Integer> init_no;
	/**
	 * Constructor.
	 * @param k The number of clusters to detect.
	 * @param fileName The filename which holds the cluster data.
	 */
	public KMeans(int k, String fileName) {
		this.k = k;
		clusters = new ArrayList<Cluster>();
		data = new Cluster();
		init_no = new ArrayList<Integer>();
		
		readData(fileName);
	}

	/**
	 * @param i The index of the cluster that is to be retrieved.
	 * @return The cluster at index i.
	 */
	public Cluster getCluster(int i) {
		return clusters.get(i);
	}
	
	/**
	 * @return The unclustered data.
	 */
	public Cluster getData() {
		return data;
	}
	
	/**
	 * @return The collection of clusters.
	 */
	public List<Cluster> getClusters() {
		return clusters;
	}
	
	/**
	 * @return The number of clusters.
	 */
	public int getClusterSize() {
		return clusters.size();
	}

	/**
	 * Reads in the data of filename.
	 * @param fileName The file which is to be read.
	 */
	private void readData(String fileName) {
		data.readData(fileName);
	}

	/**
	 * Adds a new init point at a random location in the dataset.
	 */
	
	private void addInitPoint() {
		// add code here
		Random random = new Random();
		Cluster cluster_to_save = new Cluster();
		int no_to_save = random.nextInt(data.size());
		// Check if the number has been involved 
		while(init_no.contains(no_to_save)){
			no_to_save = random.nextInt(data.size());
		}
		init_no.add(no_to_save);
		cluster_to_save.add(data.get(no_to_save));
		clusters.add(cluster_to_save);
	}
	
	/**
	 * Clears all elements from the clusters.
	 */
	private void clearClusters() {
		for (Cluster c: clusters) {
			c.clear();
		}
	}

	/**
	 * Computes clusters based on the centroids of the clusters in the previous round.
	 * If no such clusters exist yet, it will select k random points.
	 */
	public void update() {
		// add code here
		ArrayList<FeatureVector> centroids = new ArrayList<FeatureVector>();
		
		//Check initialization
		if(clusters.isEmpty()){
			for(int i=0;i<k;i++){
				this.addInitPoint();
			}
		}

		//Add centroid point and clean Cluster
		for(int i=0;i<k;i++){
				centroids.add(clusters.get(i).centroid());						
		}
		clearClusters();		
		//Assign each point to the closest clusters
		for(FeatureVector fv:data){
			double min_distance = Double.MAX_VALUE;
			int min_centroid_no = -1;
			for(int j=0;j<k;j++){
				double tmp_distance = fv.distance(centroids.get(j));
				if(tmp_distance<min_distance){
					min_distance = tmp_distance;
					min_centroid_no = j;
				}
			}
			clusters.get(min_centroid_no).add(fv);
		}
		
	}
}
