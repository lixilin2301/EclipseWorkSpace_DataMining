import java.lang.Math;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

public class Util {
	
	public static double calculateCosine(Map<Integer,Double> userX, Map<Integer,Double> userY, int nM) {
		// Compute cosine similarity between two users
		if(userX.isEmpty()||userY.isEmpty()){
			return Double.MIN_VALUE;
		}
		Map<Integer,Double> userX_sub = new HashMap<Integer,Double>(userX);
		userX_sub = subtractScalarVector(calculateAverage(userX_sub),userX_sub);
		Map<Integer,Double> userY_sub = new HashMap<Integer,Double>(userY);
		userY_sub = subtractScalarVector(calculateAverage(userY_sub),userY_sub);
		
		//After subtract maybe becomes all 0
		double euc_x = euclideanNorm(userX_sub);
		double euc_y = euclideanNorm(userY_sub);
		if(euc_x==0||euc_y==0){
			return Double.MIN_VALUE;
		}
		
		return innerProduct(userX_sub, userY_sub)/(euclideanNorm(userX_sub)*euclideanNorm(userY_sub));
//		return innerProduct(userX, userY)/(euclideanNorm(userX)*euclideanNorm(userY));
	}
	
	public static double calculatePearson(Map<Integer,Double> userX, Map<Integer,Double> userY, int nM) {
		if(userX.isEmpty()||userY.isEmpty()){
			return Double.MIN_VALUE;
		}
		Map<Integer,Double> userX_sub = new HashMap<Integer,Double>(userX);
		userX_sub = subtractScalarVector(calculateAverage(userX_sub),userX_sub);
		Map<Integer,Double> userY_sub = new HashMap<Integer,Double>(userY);
		userY_sub = subtractScalarVector(calculateAverage(userY_sub),userY_sub);
		if(euclideanNorm(userX_sub)==0||euclideanNorm(userY_sub)==0){
			return Double.MIN_VALUE;
		}
		
		
//		double avg_x = calculateAverage(userX_sub);
//		double avg_y = calculateAverage(userY_sub);
    	Set<Integer> K = new HashSet<Integer>(userX.keySet());
    	K.retainAll(userY.keySet());
    	
    	double rst_nume=0;
    	double rst_deno_x=0;
    	double rst_deno_y=0;
    	for (int k : K) {
    		System.out.println("x: "+userX.get(k)+"; y:"+userY.get(k));
    		rst_nume += (userX_sub.get(k))*(userY_sub.get(k));
    		rst_deno_x += Math.pow(userX_sub.get(k), 2);
    		rst_deno_y += Math.pow(userY_sub.get(k), 2);
    	}
		return rst_nume/((Math.sqrt(rst_deno_x)*Math.sqrt(rst_deno_y)));
	}
    
    public static double calculateAverage(Map<Integer,Double> a) {
    	// Compute average of ratings
    	double sum = 0;
    	for (double value : a.values()) {
    		sum += value;
    	}
    	return sum/a.size();
    }
    
	public static double innerProduct(Map<Integer,Double> a, Map<Integer,Double> b) {
		// Compute sum of the product of elements of two vectors
		
    	// Get intersection of keys
    	Set<Integer> K = new HashSet<Integer>(a.keySet());
    	K.retainAll(b.keySet());
    	
		double ab = 0.0;
		for (int k : K) {
			ab += a.get(k)*b.get(k);
		}
		return ab;
	}
    
    public static double euclideanNorm(Map<Integer,Double> a) {
    	// Compute Euclidean norm of a vector
    	double norm = 0.0;
    	for (double value : a.values()) {
    		norm += Math.pow(value, 2);
    	}
    	return Math.sqrt(norm);
    }
    
    public static Map<Integer,Double> subtractScalarVector(double a, Map<Integer,Double> b) {
    	// Subtract a scalar from a vector
    	for (int key : b.keySet()) {
    		b.put(key, b.get(key) - a);
    	}
    	return b;
    }
}
