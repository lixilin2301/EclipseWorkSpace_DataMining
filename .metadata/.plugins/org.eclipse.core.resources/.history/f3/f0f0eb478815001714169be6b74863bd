import java.util.ArrayList;
import java.util.List;


public class main {
	
	/**
	 * Computes nrVectors eigen vectors of m where e is the
	 * stopping criterion for the norm of the difference for an
	 * eigenvector in between two rounds.
	 * @param m The matrix of which eigenvectors should be computed.
	 * @param nrVectors The number of eigenvectors to compute.
	 * @param e The threshold for the stopping criterion.
	 * @return A list of eigenvectors in m.
	 */
	public static List<Matrix> powerIteration(Matrix m, int nrVectors, double e) {
		assert(m.cols() == m.rows() && m.cols() >= nrVectors);
		
		List<Matrix> eigenvectors = new ArrayList<Matrix>();
		
		// add code here
		Matrix v = new Matrix(m.rows(), 1, 1);
		for (int i = 0; i < nrVectors; i++) {
			double error = 100;
			while (error > e) {
				Matrix v2 = m.dot(v).multiply(1 / m.dot(v).norm());
//				System.out.println(v2);
				error = Math.abs(v.norm() - v2.norm());
				v = v2;
			}
			eigenvectors.add(v);
			double lambda = v.transpose().dot(m).dot(v).get(0,0);
			m = m.add(v.dot(v.transpose()).multiply(-lambda));
		}
		
		return eigenvectors;
	}
	
	/**
	 * Computes two eigenvectors of a small matrix example.
	 */
	public static void powerIterationTest() {
		// add code here
		Matrix m = new Matrix();
		m = Matrix.readData("data/matrix.txt");
		List<Matrix> eigenvectors = new ArrayList<Matrix>();
		eigenvectors = powerIteration(m, 2, 10e-5);
		System.out.println(eigenvectors.toString());
	}

	/**
	 * Computes the principal components from a Gaussian
	 * distributed dataset.
	 */
	public static void pca() {
		// add code here
		// Original data 
		Matrix X = new Matrix();
		X = Matrix.readData("data/gaussian.txt");
		PCAPlotter pcap = new PCAPlotter();
		pcap.plotData(X);
		
		// Covariance and Eigenvector
		Matrix X_minus = X.subtractRow( X.meanRow() );
		Matrix cov = (X_minus.transpose().dot(X_minus)).multiply( 1/(double)X.rows() ) ;
		List<Matrix> eigenvectors_cov = powerIteration(cov, 2, 10e-5);
		pcap.plotEigenvectors(eigenvectors_cov);
		System.out.println(eigenvectors_cov.toString());
	}
	
	/**
	 * Computes some principal components from a dataset
	 * of face images.
	 */
	public static void pcaFaces() {
		// add code here
		Matrix images = Matrix.readData("data/faces.txt");
		Matrix images_minus = images.subtractRow( images.meanRow() );
		Matrix cov = (images_minus.transpose().dot(images_minus)).multiply( 1/(double)images.rows() );
		List<Matrix> eigenvectors_cov = powerIteration(cov, 1, 10e-5);
		
		ImageFrame IF = new ImageFrame("Principal Components");
		IF
		
	}

	public static void main(String[] args) {
//		powerIterationTest();
//		pca();
		pcaFaces();
	}

}
